trigger:
 - main

resources:
 - repo: self

variables:
 - group: APP_IAC
 - name: tag
   value: $(Build.BuildId)

stages:
 - stage: BuildAndPushBackend
   displayName: Build and Push Backend Docker Image
   jobs:
    - job: BuildAndPushBackendImage
      displayName: Build and Push Backend Image
      pool:
       vmImage: ubuntu-latest
      steps:
       - script: |
          echo "Building Docker image for backend with tag: $(tag)"
          docker build --build-arg PORT=$(BACKEND_PORT) -f backend/Dockerfile -t joelwekesa/backend:$(tag) ./backend
         displayName: Build Backend Docker Image
         env:
          DOCKER_BUILDKIT: 1

       - task: Docker@2
         inputs:
          containerRegistry: 'docker'
          repository: 'joelwekesa/backend'
          command: 'push'
          tags: '$(tag)'

       - script: |
          echo "Docker images list after backend build:"
          docker images
         displayName: List Backend Docker Images

 - stage: BuildAndPushFrontend
   displayName: Build and Push Frontend Docker Image
   jobs:
    - job: BuildAndPushFrontendImage
      displayName: Build and Push Frontend Image
      pool:
       vmImage: ubuntu-latest
      steps:
       - script: |
          echo "Building Docker image for frontend with tag: $(tag)"
          docker build --build-arg PORT=$(FRONTEND_PORT) -f frontend/Dockerfile -t joelwekesa/frontend:$(tag) ./frontend
         displayName: Build Frontend Docker Image
         env:
          DOCKER_BUILDKIT: 1

       - task: Docker@2
         inputs:
          containerRegistry: 'docker'
          repository: 'joelwekesa/frontend'
          command: 'push'
          tags: '$(tag)'

       - script: |
          echo "Docker images list after frontend build:"
          docker images
         displayName: List Frontend Docker Images

 - stage: ProvisionInfrastructure
   displayName: Provision AWS Infrastructure with Pulumi
   jobs:
    - job: ProvisionInfrastructure
      displayName: Provision Infrastructure
      pool:
       vmImage: ubuntu-latest
      steps:
       - task: UseNode@1
         inputs:
          version: $(NODE_VERSION)

       - script: |
          echo "Installing Pulumi CLI..."
          curl -fsSL https://get.pulumi.com | sh
          export PATH=$PATH:$HOME/.pulumi/bin
          pulumi version
         displayName: Install Pulumi CLI

       - script: |
          echo "Setting up AWS credentials..."
          export AWS_ACCESS_KEY_ID="$(AWS_ACCESS_KEY_ID)"
          export AWS_SECRET_ACCESS_KEY="$(AWS_SECRET_ACCESS_KEY)"
          export PUBLIC_KEY="$(PUBLIC_KEY)"
         displayName: Configure AWS Credentials

       - script: |
          echo "Setting up Pulumi access token..."
          export PULUMI_ACCESS_TOKEN="$(PULUMI_ACCESS_TOKEN)"
         displayName: Configure Pulumi Access Token

       - script: |
          echo "Navigating to the iac folder..."
          cd iac
          echo "Installing Pulumi dependencies..."
          pnpm install
         displayName: Install Pulumi Dependencies

       - script: |
          echo "Deploying infrastructure with Pulumi..."
          cd iac
          pulumi up --stack dev --yes
         displayName: Deploy Infrastructure with Pulumi

 - stage: DeployToEC2Backend
   displayName: Deploy Backend to EC2 Instance
   jobs:
    - job: DeployBackendContainer
      displayName: Deploy Backend Container to EC2
      pool:
       vmImage: ubuntu-latest
      steps:
       - task: SSH@0
         inputs:
          sshEndpoint: 'SIL'
          runOptions: 'commands'
          commands: |
            docker pull joelwekesa/backend:$(tag)
            docker stop backend 2>/dev/null || true
            docker rm backend 2>/dev/null || true
            docker network inspect app_network >/dev/null 2>&1 || docker network create app_network
            docker run -d --name backend --network app_network -e DATABASE_URL=$(DATABASE_URL) -p $(BACKEND_PORT):$(BACKEND_PORT) joelwekesa/backend:$(tag)

         displayName: Deploy and Validate Backend Container
         timeoutInMinutes: 20

 - stage: DeployToEC2Frontend
   displayName: Deploy Frontend to EC2 Instance
   jobs:
    - job: DeployFrontendContainer
      displayName: Deploy Frontend Container to EC2
      pool:
       vmImage: ubuntu-latest
      steps:
       - task: SSH@0
         inputs:
          sshEndpoint: 'SIL'
          runOptions: 'commands'
          commands: |
            docker pull joelwekesa/frontend:$(tag)
            docker stop frontend 2>/dev/null || true
            docker rm frontend 2>/dev/null || true
            docker network inspect app_network >/dev/null 2>&1 || docker network create app_network
            docker run -d --name frontend --network app_network -p $(FRONTEND_PORT):$(FRONTEND_PORT) joelwekesa/frontend:$(tag)

         displayName: Deploy and Validate Frontend Container
         timeoutInMinutes: 20